import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import https from "https";
import { pipeline } from "stream";
import { promisify } from "util";
import tar from "tar";

const pipe = promisify(pipeline);

// __dirname workaround for ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// URLs and paths
const JDK_URL = "https://download.oracle.com/java/21/archive/jdk-21.0.8_linux-aarch64_bin.tar.gz";
const DOWNLOAD_PATH = path.join(__dirname, "jdk-download.tar.gz");
const EXTRACT_PATH = path.join(__dirname, "jdk-21");

// Helper: download file
async function downloadFile(url, dest) {
  console.log(`‚¨á Downloading JDK from ${url} ...`);
  return new Promise((resolve, reject) => {
    const file = fs.createWriteStream(dest);
    https.get(url, response => {
      if (response.statusCode !== 200) {
        reject(new Error(`Download failed: ${response.statusCode}`));
        return;
      }
      response.pipe(file);
      file.on("finish", () => {
        file.close();
        console.log("‚úÖ Download complete");
        resolve();
      });
    }).on("error", err => {
      fs.unlink(dest, () => reject(err));
    });
  });
}

// Helper: extract tar.gz and rename folder to jdk-21
async function extractJDK(archivePath, targetPath) {
  console.log("üì¶ Extracting JDK ...");
  await tar.x({
    file: archivePath,
    cwd: __dirname
  });

  // Find extracted folder (usually jdk-21.0.8)
  const extractedDir = fs.readdirSync(__dirname).find(f => f.startsWith("jdk-21.0"));
  if (!extractedDir) throw new Error("Extraction failed: folder not found");

  const oldPath = path.join(__dirname, extractedDir);

  // Remove existing jdk-21 folder if exists
  if (fs.existsSync(targetPath)) {
    fs.rmSync(targetPath, { recursive: true, force: true });
  }

  fs.renameSync(oldPath, targetPath);
  console.log(`‚úÖ Extracted and renamed folder to ${targetPath}`);
}

// Helper: make all binaries executable
function makeBinariesExecutable(binPath) {
  if (!fs.existsSync(binPath)) return;
  const files = fs.readdirSync(binPath);
  files.forEach(file => {
    const filePath = path.join(binPath, file);
    fs.chmodSync(filePath, 0o755);
  });
  console.log("‚úÖ Execute permissions set for all JDK binaries");
}

// Main function
async function setupJDK() {
  try {
    await downloadFile(JDK_URL, DOWNLOAD_PATH);
    await extractJDK(DOWNLOAD_PATH, EXTRACT_PATH);
    makeBinariesExecutable(path.join(EXTRACT_PATH, "bin"));

    console.log("üéâ JDK setup complete! Ready to run Java programs.");
  } catch (err) {
    console.error("‚ùå Failed to setup JDK:", err);
  } finally {
    // Cleanup downloaded archive
    if (fs.existsSync(DOWNLOAD_PATH)) fs.unlinkSync(DOWNLOAD_PATH);
  }
}

// Run the setup
setupJDK();
